import osimport yamlimport loggingdef load_protocol_config(config_directory, protocol_config_filename, protocol_type):    """    Loads the protocol configuration file that contains the information needed to create the MPS files.    :param protocol_config_filename: string, the name of the protocol configuration file.    :param config_directory: string, the directory where the configuration file is located.    :param protocol_type: string, the type of protocol to be used.    :return: dictionary, the configuration data.    """    # Path to the protocol configuration file    config_file_path = os.path.join(config_directory, protocol_config_filename)    # Check if the directory and the file exist and return None if they don't exist or if there is an error    # in loading the file    if not os.path.isdir(config_directory):        logging.error(f"CONFIG_LOADER. Configuration directory not found: {config_directory}")        return None    if not os.path.isfile(config_file_path):        logging.error(f"CONFIG_LOADER. Configuration file not found: {config_file_path}")        return None    # Load the configuration file as a dictionary and return it    with open(os.path.join(config_directory, protocol_config_filename)) as file:        # The FullLoader parameter handles the conversion from YAML scalar values to Python the dictionary format        doc = yaml.load(file, Loader=yaml.FullLoader)    # Get the MPS file name template based on the protocol type    if protocol_type == 'F':        file_MPS = 'Formation_Standard_Protocol-C-N.mps'    elif protocol_type == 'FC':        file_MPS = 'Formation-Cap-Check-Protocol-Template-C-N.mps'    elif protocol_type == 'CL':        file_MPS = 'Cycle_Life_Standard_Protocol-Template-C-N.mps'    # Import template Lines that need to be replaced with sample data from the config file    mass_electrode_template = doc['mass_electrode_template']    capacity_cell_template = doc['capacity_cell_template']    current_limit_cp_step_template = doc['current_limit_cp_step_template']    # Import cam electrode min and max weight from config file    # Active material weight in electrode min value    cam_min_value = float(doc['cam_min_value'])    # Active material weight in electrode max value    cam_max_value = float(doc['cam_max_value'])    logging.debug(f"CONFIG_LOADER. Configuration file loaded successfully")    # Return as a dictionary    return {        "file_MPS": file_MPS,        "mass_electrode_template": mass_electrode_template,        "capacity_cell_template": capacity_cell_template,        "current_limit_cp_step_template": current_limit_cp_step_template,        "cam_min_value": cam_min_value,        "cam_max_value": cam_max_value,    }