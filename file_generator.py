import osfrom user_input_functions import *import logging# All template mps files must be ISO-8859 encoded with CRLF line terminators for BT-Lab to read themdef ensure_directory_exists(directory):    if not os.path.exists(directory):        os.makedirs(directory)def create_formation_schedule_files(protocol_config_data,                                    path_config_data,                                    sample_ID,                                    sample_names,                                    repetition,                                    mass_electrodes):    """    Generates Biologic schedule files based on user input and configuration data stored in a configuration file.    :param protocol_config_data: dict, a dictionary containing the configuration values.    :param path_config_data: dict, a dictionary containing the path configuration values.    :param sample_ID: str, the sample ID.    :param sample_names: list, the list of sample names.    :param repetition: list, the list of repetition numbers.    :param mass_electrodes: list, the list of mass of active material.    :return: None    """    logging.debug(f'FILE_GENERATOR. Generating formation protocol files for {sample_ID}')    # Get the specific capacity of the material (nominal)    spec_capacity = get_specific_capacity()    # Create directory for files    sample_directory = os.path.join(path_config_data['path_MPS_Biologic'], sample_ID + '-Protocols')    # Check if the folder for protocols already exists    ensure_directory_exists(sample_directory)    # Replace lines in template and create filenames    filenames = []  # Creates the name of each file including the mass of the active material    for i in range(len(sample_names)):        # Create coin cell name identifier        cc_name = f"{sample_ID}-{sample_names[i]}-Formation-CC-{int(repetition[i])}"        # Calculate the battery capacity based on the specific nominal capacity and        # the mass of the active material in the coin cell        battery_capacity = round(spec_capacity * mass_electrodes[i], 5)        # Set the current limit for the constant potential step as 0.05C        current_limit = round((battery_capacity * 0.05) * 1000, 3)        # Open the template file and replace the lines with the sample information and save the file with the new name.        with open(os.path.join(path_config_data['path_MPS_Template'],                               protocol_config_data['file_MPS']), 'r', encoding= 'iso-8859-1') as file:            filedata = file.read()            filedata = filedata.replace(protocol_config_data['mass_electrode_template'],                                        f'Mass of active material : {mass_electrodes[i]} mg')            filedata = filedata.replace(protocol_config_data['capacity_cell_template'],                                        f'Battery capacity : {battery_capacity} mA.h')            filedata = filedata.replace(protocol_config_data['current_limit_cp_step_template'],                                        f'Im                  0,000               {current_limit}             0,000')        # Save the file with the new name        with open(os.path.join(sample_directory, f'{cc_name}.mps'), 'w') as file:            file.write(filedata)        # Add the filename to the list        filenames.append(f"{cc_name}_{mass_electrodes[i]}_Mass.mpr")    # Save filenames    with open(os.path.join(sample_directory, f'{sample_ID}-Formation-Filenames.txt'), 'w') as f:        for item in filenames:            f.write(f"{item}\n")    logging.info(f'FILE_GENERATOR. Protocol files for {sample_ID} were created successfully in {sample_directory}')def create_cycle_life_schedule_files(protocol_config_data,                                     path_config_data,                                     sample_ID,                                     sample_names,                                     repetition,                                     mass_electrodes):    """    Generates Biologic schedule files based on user input and configuration data stored in a configuration file.    :param protocol_config_data: dict, a dictionary containing the configuration values.    :param path_config_data: dict, a dictionary containing the path configuration values.    :param sample_ID: str, the sample ID.    :param sample_names: list, the list of sample names.    :param repetition: list, the list of repetition numbers.    :param mass_electrodes: list, the list of mass of active material.    :return: None    """    logging.debug(f'FILE_GENERATOR. Generating cycle life protocol files for {sample_ID}')    # Get the specific capacity of the material (nominal)    spec_capacity = get_specific_capacity()    # Create directory for files    sample_directory = os.path.join(path_config_data['path_MPS_Biologic'], sample_ID + '-Protocols')    # Check if the folder for protocols already exists    ensure_directory_exists(sample_directory)    # Replace lines in template and create filenames    filenames = []  # Creates the name of each file including the mass of the active material    for i in range(len(sample_names)):        # Create coin cell name identifier        cc_name = f"{sample_ID}-{sample_names[i]}-Cycle-Life-CC-{int(repetition[i])}"        # Calculate the battery capacity based on the specific nominal capacity and        # the mass of the active material in the coin cell        battery_capacity = round(spec_capacity * mass_electrodes[i], 5)        # Set the current limit for the constant potential step as 0.05C        current_limit = round((battery_capacity * 0.05) * 1000, 3)        # Open the template file and replace the lines with the sample information and save the file with the new name.        with open(os.path.join(path_config_data['path_MPS_Template'],                               protocol_config_data['file_MPS']),'r', encoding='iso-8859-1') as file:            filedata = file.read()            filedata = filedata.replace(protocol_config_data['mass_electrode_template'],                                        f'Mass of active material : {mass_electrodes[i]} mg')            filedata = filedata.replace(protocol_config_data['capacity_cell_template'],                                        f'Battery capacity : {battery_capacity} mA.h')            filedata = filedata.replace(protocol_config_data['current_limit_cp_step_template'],                                        f'Im                  0,000               {current_limit}             0,000')        # Save the file with the new name        with open(os.path.join(sample_directory, f'{cc_name}.mps'), 'w') as file:            file.write(filedata)        # Add the filename to the list        filenames.append(f"{cc_name}_{mass_electrodes[i]}_Mass.mpr")    # Save filenames    with open(os.path.join(sample_directory, f'{sample_ID}-Cycle-Life-Filenames.txt'), 'w') as f:        for item in filenames:            f.write(f"{item}\n")    logging.info(f'FILE_GENERATOR. Protocol files for {sample_ID} were created successfully in {sample_directory}')def create_formation_capacity_check_schedule_files(protocol_config_data,                                                   path_config_data,                                                   sample_ID,                                                   sample_names,                                                   repetition,                                                   mass_electrodes):    """    Generates Biologic schedule files based on user input and configuration data stored in a configuration file.    :param protocol_config_data: dict, a dictionary containing the configuration values.    :param path_config_data: dict, a dictionary containing the path configuration values.    :param sample_ID: str, the sample ID.    :param sample_names: list, the list of sample names.    :param repetition: list, the list of repetition numbers.    :param mass_electrodes: list, the list of mass of active material.    :return: None    """    logging.debug(f'FILE_GENERATOR. Generating formation + capacity check protocol files for {sample_ID}')    # Get the specific capacity of the material (nominal)    spec_capacity = get_specific_capacity()    # Create directory for files    sample_directory = os.path.join(path_config_data['path_MPS_Biologic'], sample_ID + '-Protocols')    # Check if the folder for protocols already exists    ensure_directory_exists(sample_directory)    # Replace lines in template and create filenames    filenames = []  # Creates the name of each file including the mass of the active material    # Create filenames and replace lines in template with sample information    for i in range(len(sample_names)):        # Create coin cell name identifier        cc_name = f"{sample_ID}-{sample_names[i]}-Formation-Capacity-Check-CC-{int(repetition[i])}"        # Calculate the battery capacity based on the specific nominal capacity and        # the mass of the active material in the coin cell        battery_capacity = round(spec_capacity * mass_electrodes[i], 5)        # Set the current limit for the constant potential step as 0.05C        current_limit = round((battery_capacity * 0.05) * 1000, 3)        # Open the template file and replace the lines with the sample information and save the file with the new name.        with open(os.path.join(path_config_data['path_MPS_Template'],                               protocol_config_data['file_MPS']), 'r', encoding='iso-8859-1') as file:            # Read the template file            filedata = file.read()            # Replace the lines with the sample information            filedata = filedata.replace(protocol_config_data['mass_electrode_template'],                                        f'Mass of active material : {mass_electrodes[i]} mg')            filedata = filedata.replace(protocol_config_data['capacity_cell_template'],                                        f'Battery capacity : {battery_capacity} mA.h')            filedata = filedata.replace(protocol_config_data['current_limit_cp_step_template'],                                        f'Im                  0,000               {current_limit}             0,000')        # Save the file with the new name        with open(os.path.join(sample_directory, f'{cc_name}.mps'), 'w') as file:            file.write(filedata)        # Add the filename to the list        filenames.append(f"{cc_name}_{mass_electrodes[i]}_Mass.mpr")    # Save filenames    with open(os.path.join(sample_directory, f'{sample_ID}-Formation-Capacity-Check-Filenames.txt'), 'w') as f:        for item in filenames:            f.write(f"{item}\n")    logging.info(f'FILE_GENERATOR. Protocol files for {sample_ID} were created successfully in {sample_directory}')def create_FCDCIRRate_schedule_files(protocol_config_data,                                     path_config_data,                                     sample_ID,                                     sample_names,                                     repetition,                                     mass_electrodes):    """    Generates Biologic schedule files based on user input and configuration data stored in a configuration file.    :param protocol_config_data: dict, a dictionary containing the configuration values.    :param path_config_data: dict, a dictionary containing the path configuration values.    :param sample_ID: str, the sample ID.    :param sample_names: list, the list of sample names.    :param repetition: list, the list of repetition numbers.    :param mass_electrodes: list, the list of mass of active material.    :return: None    """    logging.debug(f'FILE_GENERATOR. Generating formation,capacity check, DCIR, Rate Capability'                  f' protocol files for {sample_ID}')    # Get the specific capacity of the material (nominal)    spec_capacity = get_specific_capacity()    # Create directory for files    sample_directory = os.path.join(path_config_data['path_MPS_Biologic'], sample_ID + '-Protocols')    # Check if the folder for protocols already exists    ensure_directory_exists(sample_directory)    # Replace lines in template and create filenames    filenames = []  # Creates the name of each file including the mass of the active material    for i in range(len(sample_names)):        # Create coin cell name identifier        cc_name = f"{sample_ID}-{sample_names[i]}-FC-DCIR-Rate-CC-{int(repetition[i])}"        battery_capacity = round(spec_capacity * mass_electrodes[i], 5)        current_limit = round((battery_capacity * 0.05) * 1000, 3)        with open(os.path.join(path_config_data['path_MPS_Template'], protocol_config_data['file_MPS']), 'r',                  encoding='iso-8859-1') as file:            filedata = file.read()            filedata = filedata.replace(protocol_config_data['mass_electrode_template'],                                        f'Mass of active material : {mass_electrodes[i]} mg')            filedata = filedata.replace(protocol_config_data['capacity_cell_template'],                                        f'Battery capacity : {battery_capacity} mA.h')            filedata = filedata.replace(protocol_config_data['current_limit_cp_step_template'],                                        f'Im                  0,000               {current_limit}             0,000')        with open(os.path.join(sample_directory, f'{cc_name}.mps'), 'w') as file:            file.write(filedata)        filenames.append(f"{cc_name}_{mass_electrodes[i]}_Mass.mpr")    # Save filenames    with open(os.path.join(sample_directory, f'{sample_ID}-FC-DCIR-Rate-Filenames.txt'), 'w') as f:        for item in filenames:            f.write(f"{item}\n")    logging.info(f'FILE_GENERATOR. Protocol files for {sample_ID} were created successfully in {sample_directory}')def formation_w_comments(protocol_config_data, path_config_data, sample_ID, electrode_data):    """    Generates Biologic schedule files based on user input and configuration data stored in a configuration file. Add    comments with electrode data information to the MPS files.    :param electrode_data: dict, a dictionary containing the electrode data.    :param protocol_config_data: dict, a dictionary containing the configuration values.    :param path_config_data: dict, a dictionary containing the path configuration values.    :param sample_ID: str, the sample ID.    :return: None    """    logging.debug(f'FILE_GENERATOR. Generating formation protocol files for {sample_ID}')    sample_names_list = electrode_data['sample_names_list']    repetition_number_list = electrode_data['repetition_number_list']    mass_active_material_list = electrode_data['mass_active_material_list']    electrode_density_list = electrode_data['electrode_density_list']    electrode_loading_level_list = electrode_data['electrode_loading_level_list']    slurry_date_list = electrode_data['slurry_date_list']    # Get the specific capacity of the material (nominal)    spec_capacity = get_specific_capacity()    # Create directory for files    sample_directory = os.path.join(path_config_data['path_MPS_Biologic'], sample_ID + '-Protocols')    # Check if the folder for protocols already exists    ensure_directory_exists(sample_directory)    # Replace lines in template and create filenames    filenames = []  # Creates the name of each file including the mass of the active material    for i in range(len(sample_names_list)):        # Create coin cell name identifier        cc_name = f"{sample_ID}-{sample_names_list[i]}-Formation-CC-{int(repetition_number_list[i])}"        # Calculate the battery capacity based on the specific nominal capacity and        # the mass of the active material in the coin cell        battery_capacity = round(spec_capacity * mass_active_material_list[i], 5)        # Set the current limit for the constant potential step as 0.05C        current_limit = round((battery_capacity * 0.05) * 1000, 3)        # Open the template file and replace the lines with the sample information and save the file with the new name.        with open(os.path.join(path_config_data['path_MPS_Template'],                               protocol_config_data['file_MPS']), 'r', encoding= 'iso-8859-1') as file:            filedata = file.read()            filedata = filedata.replace(protocol_config_data['comments_template'],                                        f'Comments: Electrode data\n'                                        f'Comments : Active material weight in electrode :'                                        f'{round(mass_active_material_list[i],4)} mg\n'                                        f'Comments : Density :{round(electrode_density_list[i],2)} g/cm3\n'                                        f'Comments: Loading level :{round(electrode_loading_level_list[i],2)} mg/cm2\n'                                        f'Comments: Slurry date :{slurry_date_list[i]}')            filedata = filedata.replace(protocol_config_data['mass_electrode_template'],                                        f'Mass of active material : {mass_active_material_list[i]} mg')            filedata = filedata.replace(protocol_config_data['capacity_cell_template'],                                        f'Battery capacity : {battery_capacity} mA.h')            filedata = filedata.replace(protocol_config_data['current_limit_cp_step_template'],                                        f'Im                  0,000               {current_limit}             0,000')        # Save the file with the new name        with open(os.path.join(sample_directory, f'{cc_name}.mps'), 'w') as file:            file.write(filedata)        # Add the filename to the list        filenames.append(f"{cc_name}_{mass_active_material_list[i]}_Mass.mpr")    # Save filenames    with open(os.path.join(sample_directory, f'{sample_ID}-Formation-Filenames.txt'), 'w') as f:        for item in filenames:            f.write(f"{item}\n")    logging.info(f'FILE_GENERATOR. Protocol files for {sample_ID} were created successfully in {sample_directory}')def formation_cap_check_w_comments(protocol_config_data, path_config_data, sample_ID, electrode_data):    """    Generates Biologic schedule files based on user input and configuration data stored in a configuration file.    :param protocol_config_data: dict, a dictionary containing the configuration values.    :param path_config_data: dict, a dictionary containing the path configuration values.    :param sample_ID: str, the sample ID.    :param electrode_data: dict, a dictionary containing the electrode data.    :return: None    """    logging.debug(f'FILE_GENERATOR. Generating formation + capacity check protocol files for {sample_ID}')    sample_names_list = electrode_data['sample_names_list']    repetition_number_list = electrode_data['repetition_number_list']    mass_active_material_list = electrode_data['mass_active_material_list']    electrode_density_list = electrode_data['electrode_density_list']    electrode_loading_level_list = electrode_data['electrode_loading_level_list']    slurry_date_list = electrode_data['slurry_date_list']    # Get the specific capacity of the material (nominal)    spec_capacity = get_specific_capacity()    # Create directory for files    sample_directory = os.path.join(path_config_data['path_MPS_Biologic'], sample_ID + '-Protocols')    # Check if the folder for protocols already exists    ensure_directory_exists(sample_directory)    # Replace lines in template and create filenames    filenames = []  # Creates the name of each file including the mass of the active material    # Create filenames and replace lines in template with sample information    for i in range(len(sample_names_list)):        # Create coin cell name identifier        cc_name = f"{sample_ID}-{sample_names_list[i]}-Formation-Capacity-Check-CC-{int(repetition_number_list[i])}"        # Calculate the battery capacity based on the specific nominal capacity and        # the mass of the active material in the coin cell        battery_capacity = round(spec_capacity * mass_active_material_list[i], 5)        # Set the current limit for the constant potential step as 0.05C        current_limit = round((battery_capacity * 0.05) * 1000, 3)        # Open the template file and replace the lines with the sample information and save the file with the new name.        with open(os.path.join(path_config_data['path_MPS_Template'],                               protocol_config_data['file_MPS']), 'r', encoding='iso-8859-1') as file:            filedata = file.read()            filedata = filedata.replace(protocol_config_data['comments_template'],                                        f'Comments: Electrode data\n'                                        f'Comments : Active material weight in electrode :'                                        f'{round(mass_active_material_list[i], 4)} mg\n'                                        f'Comments : Density :{round(electrode_density_list[i], 2)} g/cm3\n'                                        f'Comments: Loading level :{round(electrode_loading_level_list[i], 2)} mg/cm2\n'                                        f'Comments: Slurry date :{slurry_date_list[i]}')            filedata = filedata.replace(protocol_config_data['mass_electrode_template'],                                        f'Mass of active material : {mass_active_material_list[i]} mg')            filedata = filedata.replace(protocol_config_data['capacity_cell_template'],                                        f'Battery capacity : {battery_capacity} mA.h')            filedata = filedata.replace(protocol_config_data['current_limit_cp_step_template'],                                        f'Im                  0,000               {current_limit}             0,000')        # Save the file with the new name        with open(os.path.join(sample_directory, f'{cc_name}.mps'), 'w') as file:            file.write(filedata)        # Add the filename to the list        filenames.append(f"{cc_name}_{mass_active_material_list[i]}_Mass.mpr")    # Save filenames    with open(os.path.join(sample_directory, f'{sample_ID}-Formation-Capacity-Check-Filenames.txt'), 'w') as f:        for item in filenames:            f.write(f"{item}\n")    logging.info(f'FILE_GENERATOR. Protocol files for {sample_ID} were created successfully in {sample_directory}')def FCDCIRRate_w_comments(protocol_config_data, path_config_data, sample_ID, electrode_data):    """    Generates Biologic schedule files based on user input and configuration data stored in a configuration file.    :param protocol_config_data: dict, a dictionary containing the configuration values.    :param path_config_data: dict, a dictionary containing the path configuration values.    :param sample_ID: str, the sample ID.    :param electrode_data: dict, a dictionary containing the electrode data.    :return: None    """    logging.debug(f'FILE_GENERATOR. Generating formation,capacity check, DCIR, Rate Capability'                  f' protocol files for {sample_ID}')    sample_names_list = electrode_data['sample_names_list']    repetition_number_list = electrode_data['repetition_number_list']    mass_active_material_list = electrode_data['mass_active_material_list']    electrode_density_list = electrode_data['electrode_density_list']    electrode_loading_level_list = electrode_data['electrode_loading_level_list']    slurry_date_list = electrode_data['slurry_date_list']    # Get the specific capacity of the material (nominal)    spec_capacity = get_specific_capacity()    # Create directory for files    sample_directory = os.path.join(path_config_data['path_MPS_Biologic'], sample_ID + '-Protocols')    # Check if the folder for protocols already exists    ensure_directory_exists(sample_directory)    # Replace lines in template and create filenames    filenames = []  # Creates the name of each file including the mass of the active material    for i in range(len(sample_names_list)):        # Create coin cell name identifier        cc_name = f"{sample_ID}-{sample_names_list[i]}-FC-DCIR-Rate-CC-{int(repetition_number_list[i])}"        battery_capacity = round(spec_capacity * mass_active_material_list[i], 5)        current_limit = round((battery_capacity * 0.05) * 1000, 3)        with open(os.path.join(path_config_data['path_MPS_Template'],                               protocol_config_data['file_MPS']), 'r', encoding='iso-8859-1') as file:            filedata = file.read()            filedata = filedata.replace(protocol_config_data['comments_template'],                                        f'Comments: Electrode data\n'                                        f'Comments : Active material weight in electrode :'                                        f'{round(mass_active_material_list[i], 4)} mg\n'                                        f'Comments : Density :{round(electrode_density_list[i], 2)} g/cm3\n'                                        f'Comments: Loading level :{round(electrode_loading_level_list[i], 2)} mg/cm2\n'                                        f'Comments: Slurry date :{slurry_date_list[i]}')            filedata = filedata.replace(protocol_config_data['mass_electrode_template'],                                        f'Mass of active material : {mass_active_material_list[i]} mg')            filedata = filedata.replace(protocol_config_data['capacity_cell_template'],                                        f'Battery capacity : {battery_capacity} mA.h')            filedata = filedata.replace(protocol_config_data['current_limit_cp_step_template'],                                        f'Im                  0,000               {current_limit}             0,000')        with open(os.path.join(sample_directory, f'{cc_name}.mps'), 'w') as file:            file.write(filedata)        filenames.append(f"{cc_name}_{mass_active_material_list[i]}_Mass.mpr")    # Save filenames    with open(os.path.join(sample_directory, f'{sample_ID}-FC-DCIR-Rate-Filenames.txt'), 'w') as f:        for item in filenames:            f.write(f"{item}\n")    logging.info(f'FILE_GENERATOR. Protocol files for {sample_ID} were created successfully in {sample_directory}')def cycle_life_w_comments(protocol_config_data, path_config_data, sample_ID, electrode_data):    """    Generates Biologic schedule files based on user input and configuration data stored in a configuration file.    :param protocol_config_data: dict, a dictionary containing the configuration values.    :param path_config_data: dict, a dictionary containing the path configuration values.    :param sample_ID: str, the sample ID.    :param electrode_data: dict, a dictionary containing the electrode data.    :return: None    """    logging.debug(f'FILE_GENERATOR. Generating cycle life protocol files for {sample_ID}')    sample_names_list = electrode_data['sample_names_list']    repetition_number_list = electrode_data['repetition_number_list']    mass_active_material_list = electrode_data['mass_active_material_list']    electrode_density_list = electrode_data['electrode_density_list']    electrode_loading_level_list = electrode_data['electrode_loading_level_list']    slurry_date_list = electrode_data['slurry_date_list']    # Get the specific capacity of the material (nominal)    spec_capacity = get_specific_capacity()    # Create directory for files    sample_directory = os.path.join(path_config_data['path_MPS_Biologic'], sample_ID + '-Protocols')    # Check if the folder for protocols already exists    ensure_directory_exists(sample_directory)    # Replace lines in template and create filenames    filenames = []  # Creates the name of each file including the mass of the active material    for i in range(len(sample_names_list)):        # Create coin cell name identifier        cc_name = f"{sample_ID}-{sample_names_list[i]}-Cycle-Life-CC-{int(repetition_number_list[i])}"        # Calculate the battery capacity based on the specific nominal capacity and        # the mass of the active material in the coin cell        battery_capacity = round(spec_capacity * mass_active_material_list[i], 5)        # Set the current limit for the constant potential step as 0.05C        current_limit = round((battery_capacity * 0.05) * 1000, 3)        # Open the template file and replace the lines with the sample information and save the file with the new name.        with open(os.path.join(path_config_data['path_MPS_Template'],                               protocol_config_data['file_MPS']), 'r', encoding='iso-8859-1') as file:            filedata = file.read()            filedata = filedata.replace(protocol_config_data['comments_template'],                                        f'Comments: Electrode data\n'                                        f'Comments : Active material weight in electrode :'                                        f'{round(mass_active_material_list[i], 4)} mg\n'                                        f'Comments : Density :{round(electrode_density_list[i], 2)} g/cm3\n'                                        f'Comments: Loading level :{round(electrode_loading_level_list[i], 2)} mg/cm2\n'                                        f'Comments: Slurry date :{slurry_date_list[i]}')            filedata = filedata.replace(protocol_config_data['mass_electrode_template'],                                        f'Mass of active material : {mass_active_material_list[i]} mg')            filedata = filedata.replace(protocol_config_data['capacity_cell_template'],                                        f'Battery capacity : {battery_capacity} mA.h')            filedata = filedata.replace(protocol_config_data['current_limit_cp_step_template'],                                        f'Im                  0,000               {current_limit}             0,000')        # Save the file with the new name        with open(os.path.join(sample_directory, f'{cc_name}.mps'), 'w') as file:            file.write(filedata)        # Add the filename to the list        filenames.append(f"{cc_name}_{mass_active_material_list[i]}_Mass.mpr")    # Save filenames    with open(os.path.join(sample_directory, f'{sample_ID}-Cycle-Life-Filenames.txt'), 'w') as f:        for item in filenames:            f.write(f"{item}\n")    logging.info(f'FILE_GENERATOR. Protocol files for {sample_ID} were created successfully in {sample_directory}')